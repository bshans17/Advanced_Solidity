pragma solidity ^0.5.5;

import "./PupperCoin.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/crowdsale/Crowdsale.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/crowdsale/emission/MintedCrowdsale.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/crowdsale/validation/CappedCrowdsale.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/crowdsale/validation/TimedCrowdsale.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/crowdsale/distribution/RefundablePostDeliveryCrowdsale.sol";

// @TODO: Inherit the crowdsale contracts
contract PupperCoinSale is Crowdsale, MintedCrowdsale {
    
    constructor(uint rate, address payable wallet, PupperCoin token) Crowdsale(rate, wallet, token) public {
    }

}

contract PupperCoinSaleDeployer {
    
    address public PupperCoin_sale_address;
    address public token_address;
    
    constructor(string memory name, string memory symbol, address payable wallet) public {
        PupperCoin token = new PupperCoin(name, symbol, 0);
        token_address = address(token);
        
        PupperCoinSale PupperCoin_sale = new PupperCoinSale(1, wallet, token);
        PupperCoin_sale_address = address(PupperCoin_sale);
        
        token.addMinter(PupperCoin_sale_address);
        token.renounceMinter();
        
    }
}




